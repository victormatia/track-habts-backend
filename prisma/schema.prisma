// Arquivo de configuração do prisma

generator client {
  provider = "prisma-client-js"
}

// Declaração de qual banco de dados será utilizado
// provider: nome do banco de dados
// url: caminho do banco de dados
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// A declaração de tabelas é feita da seguinte maneira:

model Habit {
  // nome da coluna - tipo - restrições - funções padrões
  // OBS.: A função uuid chega um id único. Saiba mais: https://www.uuidgenerator.net/
  id         String   @id @default(uuid())
  title      String
  created_at DateTime

  // Aqui declaramos o relacionamento inverso com a model DayHabit
  dayHabits     DayHabit[]

  // Aqui declaramos o relacionamento inverso com a model HabitWeekDays
  weekDays HabitWeekDays[]

  // Aqui declaramos como a tabela deve se chamar dentro do banco de dados
  @@map("habits")
}

model Day {
  id   String   @id @default(uuid())
  date DateTime

  // Aqui declaramos o relacionamento inverso com a model DayHabit
  dayHabits DayHabit[]

  @@unique([date])
  @@map("days")
}

model DayHabit {
  id       String @id @default(uuid())
  day_id   String
  habit_id String

  // Aqui declaramos que day_id é uma chave estrangeira da model Day
  day Day @relation(fields: [day_id], references: [id])

  // Aqui declaramos que habit_id é uma chave estrangeira da model Habit
  habit Habit @relation(fields: [habit_id], references: [id])

  @@unique([day_id, habit_id])
  @@map("day_habits")
}

model HabitWeekDays {
  id       String @id @default(uuid())
  habit_id String
  week_day Int

  // Aqui declaramos que habit_id é uma chave estrangeira da model Habit
  habit   Habit  @relation(fields: [habit_id], references: [id])

  @@unique([habit_id, week_day])
  @@map("habit_week_days")
}
